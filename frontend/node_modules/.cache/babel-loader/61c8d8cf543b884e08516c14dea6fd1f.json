{"ast":null,"code":"import axios from \"axios\";\nconst apiURL = \"http://localhost:8000\";\nexport const isAuthenticate = () => localStorage.getItem(\"jwt\") ? JSON.parse(localStorage.getItem(\"jwt\")) : false;\nexport const isAdmin = () => localStorage.getItem(\"jwt\") ? JSON.parse(localStorage.getItem(\"jwt\")).user.role === 1 : false;\nexport const loginReq = async ({\n  email,\n  password\n}) => {\n  const data = {\n    email,\n    password\n  };\n  try {\n    let res = await axios.post(`${apiURL}/api/signin`, data);\n    return res.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const signupReq = async ({\n  name,\n  email,\n  contact,\n  password,\n  cPassword\n}) => {\n  const data = {\n    name,\n    email,\n    contact,\n    password,\n    cPassword\n  };\n  try {\n    let res = await axios.post(`${apiURL}/api/signup`, data);\n    if (res.data.success) {\n      // Store the contact for later use in OTP verification\n      localStorage.setItem(\"contact\", res.data.contact);\n      return res.data;\n    } else {\n      return res.data; // Return errors if any\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const verifyOtpReq = async otp => {\n  const contact = localStorage.getItem(\"contact\"); // Retrieve the stored contact number\n  const data = {\n    contact,\n    otp\n  }; // Create an object with contact and otp fields\n  console.log(contact, otp);\n  try {\n    const res = await fetch(`${apiURL}/api/verify-otp`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data) // Convert the data object to a JSON string\n    });\n    return await res.json();\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["axios","apiURL","isAuthenticate","localStorage","getItem","JSON","parse","isAdmin","user","role","loginReq","email","password","data","res","post","error","console","log","signupReq","name","contact","cPassword","success","setItem","verifyOtpReq","otp","fetch","method","headers","body","stringify","json"],"sources":["D:/gray_projects/sparsh/frontend/src/components/shop/auth/fetchApi.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst apiURL = \"http://localhost:8000\";\r\n\r\nexport const isAuthenticate = () =>\r\n  localStorage.getItem(\"jwt\") ? JSON.parse(localStorage.getItem(\"jwt\")) : false;\r\n\r\nexport const isAdmin = () =>\r\n  localStorage.getItem(\"jwt\")\r\n    ? JSON.parse(localStorage.getItem(\"jwt\")).user.role === 1\r\n    : false;\r\n\r\nexport const loginReq = async ({ email, password }) => {\r\n  const data = { email, password };\r\n  try {\r\n    let res = await axios.post(`${apiURL}/api/signin`, data);\r\n    return res.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const signupReq = async ({ name, email, contact, password, cPassword }) => {\r\n  const data = { name, email, contact, password, cPassword };\r\n  try {\r\n      let res = await axios.post(`${apiURL}/api/signup`, data);\r\n      if (res.data.success) {\r\n          // Store the contact for later use in OTP verification\r\n          localStorage.setItem(\"contact\", res.data.contact);\r\n          return res.data;\r\n      } else {\r\n          return res.data; // Return errors if any\r\n      }\r\n  } catch (error) {\r\n      console.log(error);\r\n  }\r\n};\r\n\r\nexport const verifyOtpReq = async (otp) => {\r\n  const contact = localStorage.getItem(\"contact\"); // Retrieve the stored contact number\r\n  const data = { contact, otp }; // Create an object with contact and otp fields\r\n  console.log(contact,otp);\r\n  try {\r\n    const res = await fetch(`${apiURL}/api/verify-otp`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data), // Convert the data object to a JSON string\r\n    });\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,MAAM,GAAG,uBAAuB;AAEtC,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAC5BC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,KAAK;AAE/E,OAAO,MAAMG,OAAO,GAAGA,CAAA,KACrBJ,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,GACvBC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAACI,IAAI,CAACC,IAAI,KAAK,CAAC,GACvD,KAAK;AAEX,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAO;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EACrD,MAAMC,IAAI,GAAG;IAAEF,KAAK;IAAEC;EAAS,CAAC;EAChC,IAAI;IACF,IAAIE,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAE,GAAEd,MAAO,aAAY,EAAEY,IAAI,CAAC;IACxD,OAAOC,GAAG,CAACD,IAAI;EACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAAAA,CAAO;EAAEC,IAAI;EAAET,KAAK;EAAEU,OAAO;EAAET,QAAQ;EAAEU;AAAU,CAAC,KAAK;EAChF,MAAMT,IAAI,GAAG;IAAEO,IAAI;IAAET,KAAK;IAAEU,OAAO;IAAET,QAAQ;IAAEU;EAAU,CAAC;EAC1D,IAAI;IACA,IAAIR,GAAG,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAE,GAAEd,MAAO,aAAY,EAAEY,IAAI,CAAC;IACxD,IAAIC,GAAG,CAACD,IAAI,CAACU,OAAO,EAAE;MAClB;MACApB,YAAY,CAACqB,OAAO,CAAC,SAAS,EAAEV,GAAG,CAACD,IAAI,CAACQ,OAAO,CAAC;MACjD,OAAOP,GAAG,CAACD,IAAI;IACnB,CAAC,MAAM;MACH,OAAOC,GAAG,CAACD,IAAI,CAAC,CAAC;IACrB;EACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACF,CAAC;AAED,OAAO,MAAMS,YAAY,GAAG,MAAOC,GAAG,IAAK;EACzC,MAAML,OAAO,GAAGlB,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;EACjD,MAAMS,IAAI,GAAG;IAAEQ,OAAO;IAAEK;EAAI,CAAC,CAAC,CAAC;EAC/BT,OAAO,CAACC,GAAG,CAACG,OAAO,EAACK,GAAG,CAAC;EACxB,IAAI;IACF,MAAMZ,GAAG,GAAG,MAAMa,KAAK,CAAE,GAAE1B,MAAO,iBAAgB,EAAE;MAClD2B,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEzB,IAAI,CAAC0B,SAAS,CAAClB,IAAI,CAAC,CAAE;IAC9B,CAAC,CAAC;IACF,OAAO,MAAMC,GAAG,CAACkB,IAAI,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}